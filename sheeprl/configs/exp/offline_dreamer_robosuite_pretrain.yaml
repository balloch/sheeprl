# @package _global_

defaults:
  - offline_dreamer_robosuite
  - override /algo: offline_dreamer_manip
  - override /env: robosuite
  - _self_

# Experiment
seed: 5

train_transforms:
  Pad:
    pad: 4
    pad_type: reflect
  RandomCrop:
    size: ${env.screen_size}

val_transforms: null

# # Environment
env:
  capture_video: False
  env_stats: False
  wrapper:
    bddl_file: null
    reward_shaping: False
#   action_repeat: 2
#   max_episode_steps: -1
#   wrapper:
#     domain_name: walker
#     task_name: walk
#     from_vectors: False
#     from_pixels: True

# Checkpoint
checkpoint:
  every: 10000

# # Buffer
buffer:
  checkpoint: False

# Algorithm
algo:
  run_test: False
  per_rank_batch_size: 32
  offline: True
  offline_train_split: 0.9
  total_steps: 500_000
  cnn_keys:
    encoder:
      - agentview_rgb
    decoder:
      - agentview_rgb
  mlp_keys:
    encoder: []
  learning_starts: 100
  replay_ratio: 0.5

# Metric
metric:
  log_every: 1000

fabric:
  accelerator: cuda
  precision: bf16-mixed
  # precision: None
  # plugins:
  #   - _target_: lightning.fabric.plugins.precision.MixedPrecision
  #     precision: 16-mixed
  #     device: cuda
  #     scaler:
  #       _target_: torch.cuda.amp.GradScaler
  #       init_scale: 1e4
  #       growth_interval: 1000

# metric:
#   aggregator:
#     metrics:
#       Val/world_model_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/observation_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/observation_error:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/reward_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/state_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/continue_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/concept_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/per_concept_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/concept_accuracy:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
#       Val/orthognality_loss:
#         _target_: torchmetrics.MeanMetric
#         sync_on_compute: ${metric.sync_on_compute}
