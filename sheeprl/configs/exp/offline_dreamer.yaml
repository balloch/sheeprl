# @package _global_

defaults:
  - override /algo: offline_dreamer_S
  - override /env: robosuite
  - override /model_manager: offline_dreamer
  - _self_

exp_name: ${algo.name}_${env.id}
run_name: ${now:%Y-%m-%d_%H-%M-%S}_${exp_name}_${seed}
root_dir: ${algo.name}/${env.id}

# Algorithm
algo:
  replay_ratio: 1
  total_steps: 5000000
  per_rank_batch_size: 16
  per_rank_sequence_length: 64
  cnn_keys:
    encoder: [rgb]
    decoder: [rgb]

# Checkpoint
checkpoint:
  every: 100000

# Buffer
buffer:
  size: 1000000
  checkpoint: True

# Distribution
distribution:
  type: "auto"

metric:
  aggregator:
    metrics:
      Loss/world_model_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/value_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/policy_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/observation_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/reward_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/state_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/continue_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/concept_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/per_concept_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/orthognality_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/kl:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/post_entropy:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/prior_entropy:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/world_model:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/actor:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/critic:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/rew_avg_ep:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/rew_max_ep:
        _target_: torchmetrics.MaxMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/reach_avg_ep:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/reach_max_ep:
        _target_: torchmetrics.MaxMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/grasp_avg_ep:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/grasp_max_ep:
        _target_: torchmetrics.MaxMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/lift_avg_ep:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/lift_max_ep:
        _target_: torchmetrics.MaxMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/hover_avg_ep:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Rewards/hover_max_ep:
        _target_: torchmetrics.MaxMetric
        sync_on_compute: ${metric.sync_on_compute}
